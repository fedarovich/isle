<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
    const string Scope = "Scope";

	string[] logLevels = { "Trace", "Debug", "Information", "Warning", "Error", "Critical", null, Scope }; 

    string GetTypeName(string logLevel) => logLevel + "LogInterpolatedStringHandler";
#>
#nullable enable
using System.Runtime.CompilerServices;
using Microsoft.Extensions.Logging;
using Isle.Configuration;
using Isle.Extensions.Logging.Configuration;

namespace Isle.Extensions.Logging;

<# foreach (var logLevel in logLevels) { #>

/// <summary>
/// Interpolated string handler for <#= logLevel != Scope ? $"Log{logLevel}()" : "BeginScope()" #> method.
/// </summary>
/// <remarks>
/// This class should not be used directly in your code.
/// </remarks>
[InterpolatedStringHandler]
public ref partial struct <#= GetTypeName(logLevel) #>
{
    private IFormattedLogValuesBuilder _builder = null!;

    /// <summary>
    /// Creates a new instance of <see cref="<#= GetTypeName(logLevel) #>" />.
    /// </summary>
    public <#= GetTypeName(logLevel) #>(
        int literalLength, 
        int formattedCount,
        ILogger logger<# if (logLevel != Scope) { #>,
<# } #>
<# if (logLevel == null) { #>
        LogLevel logLevel,
<# } #>
<# if (logLevel != Scope) { #>
        out bool isEnabled
<# } #>
    )
    {
<# if (logLevel != Scope) { #>
        isEnabled = logger.IsEnabled(<#= logLevel != null ? "LogLevel." + logLevel : "logLevel" #>);
        if (isEnabled)
        {
<# } #>
            _builder = FormattedLogValuesBuilder.Acquire(literalLength, formattedCount);
<# if (logLevel != Scope) { #>
        }
<# } #>
    }

<# if (logLevel != Scope) { #>
    /// <summary>
    /// Gets the value indicating whether the handler is enabled.
    /// </summary>
    public bool IsEnabled => _builder != null;
<# } #>

    /// <summary>
    /// Appends a string literal to the template string.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AppendLiteral(string? str)
    {
        if (!string.IsNullOrEmpty(str))
        {
            if (ExtensionsLoggingConfiguration.IsResettable)
            {
                _builder.AppendLiteral(str!);
            }
            else if (ExtensionsLoggingConfiguration.EnableMessageTemplateCaching)
            {
                Unsafe.As<CachingFormattedLogValuesBuilder>(_builder).AppendLiteral(str!); // Devirtualize the call
            }
            else
            {
                Unsafe.As<SimpleFormattedLogValuesBuilder>(_builder).AppendLiteral(str!); // Devirtualize the call
            }
        }
    }

    /// <summary>
    /// Appends a <see cref="LiteralValue" /> to the template string.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AppendFormatted(in LiteralValue literal)
    {
        if (!string.IsNullOrEmpty(literal.Value))
        {
            if (ExtensionsLoggingConfiguration.IsResettable)
            {
                _builder.AppendLiteralValue(literal);
            }
            else if (ExtensionsLoggingConfiguration.EnableMessageTemplateCaching)
            {
                Unsafe.As<CachingFormattedLogValuesBuilder>(_builder).AppendLiteralValue(literal); // Devirtualize the call
            }
            else
            {
                Unsafe.As<SimpleFormattedLogValuesBuilder>(_builder).AppendLiteralValue(literal); // Devirtualize the call
            }
        }
    }

    /// <summary>
    /// Appends a <paramref name="value" /> to the log message.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AppendFormatted<T>(T value, int alignment = 0, string? format = null, [CallerArgumentExpression("value")] string nameExpression = "")
    {
        var name = nameExpression.GetNameFromCallerArgumentExpression<T>();

        if (alignment == 0 && string.IsNullOrEmpty(format))
        {
            if (ExtensionsLoggingConfiguration.IsResettable)
            {
                _builder.AppendFormatted(name, value);
            }
            else if (ExtensionsLoggingConfiguration.EnableMessageTemplateCaching)
            {
                Unsafe.As<CachingFormattedLogValuesBuilder>(_builder).AppendFormatted(name, value); // Devirtualize the call
            }
            else
            {
                Unsafe.As<SimpleFormattedLogValuesBuilder>(_builder).AppendFormatted(name, value); // Devirtualize the call
            }
        }
        else
        {
            if (ExtensionsLoggingConfiguration.IsResettable)
            {
                _builder.AppendFormatted(name, value, alignment, format);
            }
            else if (ExtensionsLoggingConfiguration.EnableMessageTemplateCaching)
            {
                Unsafe.As<CachingFormattedLogValuesBuilder>(_builder).AppendFormatted(name, value, alignment, format); // Devirtualize the call
            }
            else
            {
                Unsafe.As<SimpleFormattedLogValuesBuilder>(_builder).AppendFormatted(name, value, alignment, format); // Devirtualize the call
            }
        }
    } 

    /// <summary>
    /// Appends a <paramref name="namedLogValue" /> to the log message.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void AppendFormatted(in NamedLogValue namedLogValue, int alignment = 0, string? format = null)
    {
        if (alignment == 0 && string.IsNullOrEmpty(format))
        {
            if (ExtensionsLoggingConfiguration.IsResettable)
            {
                _builder.AppendFormatted(namedLogValue.Name, namedLogValue.Value);
            }
            else if (ExtensionsLoggingConfiguration.EnableMessageTemplateCaching)
            {
                Unsafe.As<CachingFormattedLogValuesBuilder>(_builder).AppendFormatted(namedLogValue.Name, namedLogValue.Value); // Devirtualize the call
            }
            else
            {
                Unsafe.As<SimpleFormattedLogValuesBuilder>(_builder).AppendFormatted(namedLogValue.Name, namedLogValue.Value); // Devirtualize the call
            }
        }
        else
        {
            if (ExtensionsLoggingConfiguration.IsResettable)
            {
                _builder.AppendFormatted(namedLogValue.Name, namedLogValue.Value, alignment, format);
            }
            else if (ExtensionsLoggingConfiguration.EnableMessageTemplateCaching)
            {
                Unsafe.As<CachingFormattedLogValuesBuilder>(_builder).AppendFormatted(namedLogValue.Name, namedLogValue.Value, alignment, format); // Devirtualize the call
            }
            else
            {
                Unsafe.As<SimpleFormattedLogValuesBuilder>(_builder).AppendFormatted(namedLogValue.Name, namedLogValue.Value, alignment, format); // Devirtualize the call
            }
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    internal FormattedLogValuesBase GetFormattedLogValuesAndReset()
    {
        FormattedLogValuesBase result;
        if (ExtensionsLoggingConfiguration.IsResettable)
        {
            result = _builder.BuildAndReset();
        }
        else if (ExtensionsLoggingConfiguration.EnableMessageTemplateCaching)
        {
            result = Unsafe.As<CachingFormattedLogValuesBuilder>(_builder).BuildAndReset();
        }
        else
        {
            result = Unsafe.As<SimpleFormattedLogValuesBuilder>(_builder).BuildAndReset();
        }
        _builder = null!;
        return result;
    }
}

<# } #>