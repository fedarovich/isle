<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".g.cs" #>
<#
	string[] logLevels = { "Trace", "Debug", "Information", "Warning", "Error", "Critical", "" }; 

    string GetTestName(string name, string logLevel, bool withEventId, bool withException) => 
        $"Log{logLevel}_{name}{(withEventId ? "_WithEventId" : "")}{(withException ? "_WithException" : "")}";
#>
#nullable enable
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using Microsoft.Extensions.Logging;
using NUnit.Framework;
using FluentAssertions;
using Serilog.Events;

namespace Isle.Extensions.Logging.Tests;

[TestFixtureSource(nameof(FixtureArgs))]
public class SerilogLoggerExtensionsTests : SerilogBaseFixture
{
    public SerilogLoggerExtensionsTests(LogLevel minLogLevel, bool enableCaching) : base(minLogLevel, enableCaching)
    {
    }

<# foreach (var logLevel in logLevels) { #>

    #region Log<#= (logLevel) #>

<# foreach (var withEventId in new[] { false, true }) { #>
<# foreach (var withException in new[] { false, true }) { #>

    [Test]
    public void <#= GetTestName("Literal", logLevel, withEventId, withException) #>(<#if (logLevel == "") { #>[ValueSource(nameof(LogLevels))] LogLevel logLevel<# } #>)
    {
<#if (logLevel != "") { #> 
        const LogLevel logLevel = LogLevel.<#= (logLevel) #>;
<# } #>
        const string message = "Test";

        <#if (withEventId) { #>EventId eventId = 5;<# } #>

        <#if (withException) { #>Exception exception = new InvalidOperationException("Test exception."); <# } #>

        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>$"Test");
        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>message);

        if (logLevel < MinLogLevel)
        {
            LogEvents.Should().BeEmpty();
        }
        else
        {
            LogEvents.Should().HaveCount(2);
            var logEvent = LogEvents.First();
            var serilogEvent = LogEvents.Last();
            logEvent.Should().BeEquivalentTo(serilogEvent, LogEventEquivalency);
            logEvent.Should().BeEquivalentTo(
                new LogEvent(
                    DateTimeOffset.Now,
                    ToSerilogLevel(logLevel),
                    <#= withException ? "exception" : "default(Exception)" #>,
                    Parser.Parse(message),
                    new LogEventProperty[]
                    {
                        SourceContextProperty,
<#if (withEventId) { #>
                        EventIdProperty(eventId)
<# } #>
                    }
                ),
                LogEventEquivalency);
            logEvent.RenderMessage(CultureInfo.InvariantCulture).Should().Be(message);
        }
    }

    [Test]
    public void <#= GetTestName("LiteralWithBraces", logLevel, withEventId, withException) #>(<#if (logLevel == "") { #>[ValueSource(nameof(LogLevels))] LogLevel logLevel<# } #>)
    {
<#if (logLevel != "") { #> 
        const LogLevel logLevel = LogLevel.<#= (logLevel) #>;
<# } #>
        const string message = "T{{es}}t";

        <#if (withEventId) { #>EventId eventId = 5;<# } #>

        <#if (withException) { #>Exception exception = new InvalidOperationException("Test exception."); <# } #>

        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>$"T{{es}}t");
        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>message);

        if (logLevel < MinLogLevel)
        {
            LogEvents.Should().BeEmpty();
        }
        else
        {
            LogEvents.Should().HaveCount(2);
            var logEvent = LogEvents.First();
            var serilogEvent = LogEvents.Last();
            logEvent.Should().BeEquivalentTo(serilogEvent, LogEventEquivalency);
            logEvent.Should().BeEquivalentTo(
                new LogEvent(
                    DateTimeOffset.Now,
                    ToSerilogLevel(logLevel),
                    <#= withException ? "exception" : "default(Exception)" #>,
                    Parser.Parse(message),
                    new LogEventProperty[]
                    {
                        SourceContextProperty,
<#if (withEventId) { #>
                        EventIdProperty(eventId)
<# } #>
                    }
                ),
                LogEventEquivalency);
            logEvent.RenderMessage(CultureInfo.InvariantCulture).Should().Be("T{es}t");
        }
    }

    [Test]
    public void <#= GetTestName("Scalar", logLevel, withEventId, withException) #>(<#if (logLevel == "") { #>[ValueSource(nameof(LogLevels))] LogLevel logLevel<# } #>)
    {
<#if (logLevel != "") { #> 
        const LogLevel logLevel = LogLevel.<#= (logLevel) #>;
<# } #>
        int value = 7;

        <#if (withEventId) { #>EventId eventId = 5;<# } #>

        <#if (withException) { #>Exception exception = new InvalidOperationException("Test exception."); <# } #>

        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>$"{value}");
        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>"{value}", value);

        if (logLevel < MinLogLevel)
        {
            LogEvents.Should().BeEmpty();
        }
        else
        {
            LogEvents.Should().HaveCount(2);
            var logEvent = LogEvents.First();
            var serilogEvent = LogEvents.Last();
            logEvent.Should().BeEquivalentTo(serilogEvent, LogEventEquivalency);
            logEvent.Should().BeEquivalentTo(
                new LogEvent(
                    DateTimeOffset.Now,
                    ToSerilogLevel(logLevel),
                    <#= withException ? "exception" : "default(Exception)" #>,
                    Parser.Parse("{value}"),
                    new LogEventProperty[]
                    {
                        value.ToLogEventProperty(),
                        SourceContextProperty,
<#if (withEventId) { #>
                        EventIdProperty(eventId)
<# } #>
                    }
                ),
                LogEventEquivalency);
            logEvent.RenderMessage(CultureInfo.InvariantCulture).Should().Be(Format(value));
        }
    }

    [Test]
    public void <#= GetTestName("ScalarWithAlignment", logLevel, withEventId, withException) #>(<#if (logLevel == "") { #>[ValueSource(nameof(LogLevels))] LogLevel logLevel<# } #>)
    {
<#if (logLevel != "") { #> 
        const LogLevel logLevel = LogLevel.<#= (logLevel) #>;
<# } #>
        int value = 7;

        <#if (withEventId) { #>EventId eventId = 5;<# } #>

        <#if (withException) { #>Exception exception = new InvalidOperationException("Test exception."); <# } #>

        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>$"{value,3}");
        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>"{value,3}", value);

        if (logLevel < MinLogLevel)
        {
            LogEvents.Should().BeEmpty();
        }
        else
        {
            LogEvents.Should().HaveCount(2);
            var logEvent = LogEvents.First();
            var serilogEvent = LogEvents.Last();
            logEvent.Should().BeEquivalentTo(serilogEvent, LogEventEquivalency);
            logEvent.Should().BeEquivalentTo(
                new LogEvent(
                    DateTimeOffset.Now,
                    ToSerilogLevel(logLevel),
                    <#= withException ? "exception" : "default(Exception)" #>,
                    Parser.Parse("{value,3}"),
                    new LogEventProperty[]
                    {
                        value.ToLogEventProperty(),
                        SourceContextProperty,
<#if (withEventId) { #>
                        EventIdProperty(eventId)
<# } #>
                    }
                ),
                LogEventEquivalency);
            logEvent.RenderMessage(CultureInfo.InvariantCulture).Should().Be(Format(value,3));
        }
    }

    [Test]
    public void <#= GetTestName("ScalarWithFormat", logLevel, withEventId, withException) #>(<#if (logLevel == "") { #>[ValueSource(nameof(LogLevels))] LogLevel logLevel<# } #>)
    {
<#if (logLevel != "") { #> 
        const LogLevel logLevel = LogLevel.<#= (logLevel) #>;
<# } #>
        int value = 7000;

        <#if (withEventId) { #>EventId eventId = 5;<# } #>

        <#if (withException) { #>Exception exception = new InvalidOperationException("Test exception."); <# } #>

        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>$"{value:N}");
        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>"{value:N}", value);

        if (logLevel < MinLogLevel)
        {
            LogEvents.Should().BeEmpty();
        }
        else
        {
            LogEvents.Should().HaveCount(2);
            var logEvent = LogEvents.First();
            var serilogEvent = LogEvents.Last();
            logEvent.Should().BeEquivalentTo(serilogEvent, LogEventEquivalency);
            logEvent.Should().BeEquivalentTo(
                new LogEvent(
                    DateTimeOffset.Now,
                    ToSerilogLevel(logLevel),
                    <#= withException ? "exception" : "default(Exception)" #>,
                    Parser.Parse("{value:N}"),
                    new LogEventProperty[]
                    {
                        value.ToLogEventProperty(),
                        SourceContextProperty,
<#if (withEventId) { #>
                        EventIdProperty(eventId)
<# } #>
                    }
                ),
                LogEventEquivalency);
            logEvent.RenderMessage(CultureInfo.InvariantCulture).Should().Be(Format(value, "N"));
        }
    }

    [Test]
    public void <#= GetTestName("ScalarWithAlignmentAndFormat", logLevel, withEventId, withException) #>(<#if (logLevel == "") { #>[ValueSource(nameof(LogLevels))] LogLevel logLevel<# } #>)
    {
<#if (logLevel != "") { #> 
        const LogLevel logLevel = LogLevel.<#= (logLevel) #>;
<# } #>
        int value = 7000;

        <#if (withEventId) { #>EventId eventId = 5;<# } #>

        <#if (withException) { #>Exception exception = new InvalidOperationException("Test exception."); <# } #>

        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>$"{value,8:N}");
        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>"{value,8:N}", value);

        if (logLevel < MinLogLevel)
        {
            LogEvents.Should().BeEmpty();
        }
        else
        {
            LogEvents.Should().HaveCount(2);
            var logEvent = LogEvents.First();
            var serilogEvent = LogEvents.Last();
            logEvent.Should().BeEquivalentTo(serilogEvent, LogEventEquivalency);
            logEvent.Should().BeEquivalentTo(
                new LogEvent(
                    DateTimeOffset.Now,
                    ToSerilogLevel(logLevel),
                    <#= withException ? "exception" : "default(Exception)" #>,
                    Parser.Parse("{value,8:N}"),
                    new LogEventProperty[]
                    {
                        value.ToLogEventProperty(),
                        SourceContextProperty,
<#if (withEventId) { #>
                        EventIdProperty(eventId)
<# } #>
                    }
                ),
                LogEventEquivalency);
            logEvent.RenderMessage(CultureInfo.InvariantCulture).Should().Be(Format(value, 8, "N"));
        }
    }

    [Test]
    public void <#= GetTestName("Complex", logLevel, withEventId, withException) #>(<#if (logLevel == "") { #>[ValueSource(nameof(LogLevels))] LogLevel logLevel<# } #>)
    {
<#if (logLevel != "") { #> 
        const LogLevel logLevel = LogLevel.<#= (logLevel) #>;
<# } #>
        var value = new TestObject(3, 5);

        <#if (withEventId) { #>EventId eventId = 5;<# } #>

        <#if (withException) { #>Exception exception = new InvalidOperationException("Test exception."); <# } #>

        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>$"{value}");
        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>"{@value}", value);

        if (logLevel < MinLogLevel)
        {
            LogEvents.Should().BeEmpty();
        }
        else
        {
            LogEvents.Should().HaveCount(2);
            var logEvent = LogEvents.First();
            var serilogEvent = LogEvents.Last();
            logEvent.Should().BeEquivalentTo(serilogEvent, LogEventEquivalency);
            logEvent.Should().BeEquivalentTo(
                new LogEvent(
                    DateTimeOffset.Now,
                    ToSerilogLevel(logLevel),
                    <#= withException ? "exception" : "default(Exception)" #>,
                    Parser.Parse("{@value}"),
                    new LogEventProperty[]
                    {
                        value.ToLogEventProperty(),
                        SourceContextProperty,
<#if (withEventId) { #>
                        EventIdProperty(eventId)
<# } #>
                    }
                ),
                LogEventEquivalency);
            logEvent.RenderMessage(CultureInfo.InvariantCulture).Should().Be(Format(value));      
        }
    }

    [Test]
    public void <#= GetTestName("Collection", logLevel, withEventId, withException) #>(<#if (logLevel == "") { #>[ValueSource(nameof(LogLevels))] LogLevel logLevel<# } #>)
    {
<#if (logLevel != "") { #> 
        const LogLevel logLevel = LogLevel.<#= (logLevel) #>;
<# } #>
        var value = new int[] {1, 2, 3};

        <#if (withEventId) { #>EventId eventId = 5;<# } #>

        <#if (withException) { #>Exception exception = new InvalidOperationException("Test exception."); <# } #>

        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>$"{value}");
        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>"{@value}", value);

        if (logLevel < MinLogLevel)
        {
            LogEvents.Should().BeEmpty();
        }
        else
        {
            LogEvents.Should().HaveCount(2);
            var logEvent = LogEvents.First();
            var serilogEvent = LogEvents.Last();
            logEvent.Should().BeEquivalentTo(serilogEvent, LogEventEquivalency);
            logEvent.Should().BeEquivalentTo(
                new LogEvent(
                    DateTimeOffset.Now,
                    ToSerilogLevel(logLevel),
                    <#= withException ? "exception" : "default(Exception)" #>,
                    Parser.Parse("{@value}"),
                    new LogEventProperty[]
                    {
                        value.ToLogEventProperty(),
                        SourceContextProperty,
<#if (withEventId) { #>
                        EventIdProperty(eventId)
<# } #>
                    }
                ),
                LogEventEquivalency);
            logEvent.RenderMessage(CultureInfo.InvariantCulture).Should().Be(Format(value));
        }
    }

    [Test]
    public void <#= GetTestName("String", logLevel, withEventId, withException) #>(<#if (logLevel == "") { #>[ValueSource(nameof(LogLevels))] LogLevel logLevel<# } #>)
    {
<#if (logLevel != "") { #> 
        const LogLevel logLevel = LogLevel.<#= (logLevel) #>;
<# } #>
        var value = "Test";

        <#if (withEventId) { #>EventId eventId = 5;<# } #>

        <#if (withException) { #>Exception exception = new InvalidOperationException("Test exception."); <# } #>

        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>$"{value}");
        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>"{value}", value);

        if (logLevel < MinLogLevel)
        {
            LogEvents.Should().BeEmpty();
        }
        else
        {
            LogEvents.Should().HaveCount(2);
            var logEvent = LogEvents.First();
            var serilogEvent = LogEvents.Last();
            logEvent.Should().BeEquivalentTo(serilogEvent, LogEventEquivalency);
            logEvent.Should().BeEquivalentTo(
                new LogEvent(
                    DateTimeOffset.Now,
                    ToSerilogLevel(logLevel),
                    <#= withException ? "exception" : "default(Exception)" #>,
                    Parser.Parse("{value}"),
                    new LogEventProperty[]
                    {
                        value.ToLogEventProperty(),
                        SourceContextProperty,
<#if (withEventId) { #>
                        EventIdProperty(eventId)
<# } #>
                    }
                ),
                LogEventEquivalency);
            logEvent.RenderMessage(CultureInfo.InvariantCulture).Should().Be(Format(value));
        }
    }

    [Test]
    public void <#= GetTestName("Mixed", logLevel, withEventId, withException) #>(<#if (logLevel == "") { #>[ValueSource(nameof(LogLevels))] LogLevel logLevel<# } #>)
    {
<#if (logLevel != "") { #> 
        const LogLevel logLevel = LogLevel.<#= (logLevel) #>;
<# } #>
        var arg1 = "Test";
        var arg2 = 5000;
        var arg3 = 4.5;
        var arg4 = new TestObject(7, 11);
        var arg5 = new int[] {5, 4, 3};
        var veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongArg = "veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongValue";

        <#if (withEventId) { #>EventId eventId = 5;<# } #>

        <#if (withException) { #>Exception exception = new InvalidOperationException("Test exception."); <# } #>

        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>
            $"ABCD{arg1,7}EFGH{arg2:N}IJKL{arg3,-10:F3}MNOP{arg4}QRST{arg5}UVWX{veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongArg}YZ");
        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>
            "ABCD{arg1,7}EFGH{arg2:N}IJKL{arg3,-10:F3}MNOP{@arg4}QRST{@arg5}UVWX{veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongArg}YZ",
            arg1,
            arg2,
            arg3,
            arg4,
            arg5,
            veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongArg);

        if (logLevel < MinLogLevel)
        {
            LogEvents.Should().BeEmpty();
        }
        else
        {
            LogEvents.Should().HaveCount(2);
            var logEvent = LogEvents.First();
            var serilogEvent = LogEvents.Last();
            logEvent.Should().BeEquivalentTo(serilogEvent, LogEventEquivalency);
            logEvent.Should().BeEquivalentTo(
                new LogEvent(
                    DateTimeOffset.Now,
                    ToSerilogLevel(logLevel),
                    <#= withException ? "exception" : "default(Exception)" #>,
                    Parser.Parse("ABCD{arg1,7}EFGH{arg2:N}IJKL{arg3,-10:F3}MNOP{@arg4}QRST{@arg5}UVWX{veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongArg}YZ"),
                    new LogEventProperty[]
                    {
                        arg1.ToLogEventProperty(),
                        arg2.ToLogEventProperty(),
                        arg3.ToLogEventProperty(),
                        arg4.ToLogEventProperty(),
                        arg5.ToLogEventProperty(),
                        veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongArg.ToLogEventProperty(),
                        SourceContextProperty,
<#if (withEventId) { #>
                        EventIdProperty(eventId)
<# } #>
                    }
                ),
                LogEventEquivalency);
            logEvent.RenderMessage(CultureInfo.InvariantCulture).Should().Be(
                $"ABCD {Format(arg1, 7)}EFGH{Format(arg2, "N")}IJKL{Format(arg3,-10,"F3")}MNOP{Format(arg4)}QRST{Format(arg5)}UVWX{Format(veryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryVeryLongArg)}YZ");
        }
    }

    [Test]
    public void <#= GetTestName("Named", logLevel, withEventId, withException) #>(<#if (logLevel == "") { #>[ValueSource(nameof(LogLevels))] LogLevel logLevel<# } #>)
    {
<#if (logLevel != "") { #> 
        const LogLevel logLevel = LogLevel.<#= (logLevel) #>;
<# } #>
        var value = new TestObject(3, 5);

        <#if (withEventId) { #>EventId eventId = 5;<# } #>

        <#if (withException) { #>Exception exception = new InvalidOperationException("Test exception."); <# } #>

        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>
            $"Default: {value.Named("default")}, Stringified: {value.Named("$str")}, Destructured: {value.Named("@destructured")}");
        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>
            "Default: {@default}, Stringified: {$str}, Destructured: {@destructured}", value, value, value);


        if (logLevel < MinLogLevel)
        {
            LogEvents.Should().BeEmpty();
        }
        else
        {
            LogEvents.Should().HaveCount(2);
            var logEvent = LogEvents.First();
            var serilogEvent = LogEvents.Last();
            logEvent.Should().BeEquivalentTo(serilogEvent, LogEventEquivalency);
            logEvent.Should().BeEquivalentTo(
                new LogEvent(
                    DateTimeOffset.Now,
                    ToSerilogLevel(logLevel),
                    <#= withException ? "exception" : "default(Exception)" #>,
                    Parser.Parse("Default: {@default}, Stringified: {$str}, Destructured: {@destructured}"),
                    new LogEventProperty[]
                    {
                        value.ToLogEventProperty("default"),
                        value.ToString().ToLogEventProperty("str"),
                        value.ToLogEventProperty("destructured"),
                        SourceContextProperty,
<#if (withEventId) { #>
                        EventIdProperty(eventId)
<# } #>
                    }
                ),
                LogEventEquivalency);
            logEvent.RenderMessage(CultureInfo.InvariantCulture).Should().Be(
                $"Default: {Format(value)}, Stringified: {Format(value.ToString())}, Destructured: {Format(value)}");     
        }
    }

    [Test]
    public void <#= GetTestName("LiteralValue", logLevel, withEventId, withException) #>(<#if (logLevel == "") { #>[ValueSource(nameof(LogLevels))] LogLevel logLevel<# } #>)
    {
<#if (logLevel != "") { #> 
        const LogLevel logLevel = LogLevel.<#= (logLevel) #>;
<# } #>
        const string message = "Test";

        <#if (withEventId) { #>EventId eventId = 5;<# } #>

        <#if (withException) { #>Exception exception = new InvalidOperationException("Test exception."); <# } #>

        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>$"{(LiteralValue) "Test"}");
        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>message);

        if (logLevel < MinLogLevel)
        {
            LogEvents.Should().BeEmpty();
        }
        else
        {
            LogEvents.Should().HaveCount(2);
            var logEvent = LogEvents.First();
            var serilogEvent = LogEvents.Last();
            logEvent.Should().BeEquivalentTo(serilogEvent, LogEventEquivalency);
            logEvent.Should().BeEquivalentTo(
                new LogEvent(
                    DateTimeOffset.Now,
                    ToSerilogLevel(logLevel),
                    <#= withException ? "exception" : "default(Exception)" #>,
                    Parser.Parse(message),
                    new LogEventProperty[]
                    {
                        SourceContextProperty,
<#if (withEventId) { #>
                        EventIdProperty(eventId)
<# } #>
                    }
                ),
                LogEventEquivalency);
            logEvent.RenderMessage(CultureInfo.InvariantCulture).Should().Be(message);
        }
    }

    [Test]
    public void <#= GetTestName("LiteralValueWithBraces", logLevel, withEventId, withException) #>(<#if (logLevel == "") { #>[ValueSource(nameof(LogLevels))] LogLevel logLevel<# } #>)
    {
<#if (logLevel != "") { #> 
        const LogLevel logLevel = LogLevel.<#= (logLevel) #>;
<# } #>
        const string message = "T{{es}}t";

        <#if (withEventId) { #>EventId eventId = 5;<# } #>

        <#if (withException) { #>Exception exception = new InvalidOperationException("Test exception."); <# } #>

        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>$"{(LiteralValue) "T{es}t"}");
        Logger.Log<#= (logLevel) #>(<#if (logLevel == "") { #>logLevel, <# } #><#if (withEventId) { #>eventId, <# } #><#if (withException) { #>exception, <# } #>message);

        if (logLevel < MinLogLevel)
        {
            LogEvents.Should().BeEmpty();
        }
        else
        {
            LogEvents.Should().HaveCount(2);
            var logEvent = LogEvents.First();
            var serilogEvent = LogEvents.Last();
            logEvent.Should().BeEquivalentTo(serilogEvent, LogEventEquivalency);
            logEvent.Should().BeEquivalentTo(
                new LogEvent(
                    DateTimeOffset.Now,
                    ToSerilogLevel(logLevel),
                    <#= withException ? "exception" : "default(Exception)" #>,
                    Parser.Parse(message),
                    new LogEventProperty[]
                    {
                        SourceContextProperty,
<#if (withEventId) { #>
                        EventIdProperty(eventId)
<# } #>
                    }
                ),
                LogEventEquivalency);
            logEvent.RenderMessage(CultureInfo.InvariantCulture).Should().Be("T{es}t");
        }
    }

<# } #>
<# } #>

    #endregion // Log<#= (logLevel) #>

<# } #>

}