# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: windows-2022

parameters:
  - name: IsRelease
    displayName: 'Is Release'
    default: false
    type: boolean

variables:
  BuildConfiguration: 'Release'
  MajorVersion: 1
  MinorVersion: 6
  ${{ if eq(parameters.IsRelease, false) }}:
    Suffix: 'pre' 
  ${{ else }}:
    Suffix: ''

name: '$(MajorVersion).$(MinorVersion).$(rev:r)'

steps:
- task: UseDotNet@2
  displayName: 'Install .Net 5'
  inputs:
    packageType: sdk
    version: '3.1.x'
    performMultiLevelLookup: true

- task: UseDotNet@2
  displayName: 'Install .Net 5'
  inputs:
    packageType: sdk
    version: '5.x'
    performMultiLevelLookup: true    

- task: UseDotNet@2
  displayName: 'Install .Net 7'
  inputs:
    packageType: sdk
    version: '7.x'
    performMultiLevelLookup: true  

- task: UseDotNet@2
  displayName: 'Install .Net 8'
  inputs:
    packageType: sdk
    version: '8.x'
    performMultiLevelLookup: true    

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  inputs:
    command: restore
    projects: 'src/Isle/Isle.sln'
    arguments: '-c $(BuildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    command: build    
    projects: 'src/Isle/Isle.sln'
    arguments: '-c $(BuildConfiguration) -p:FileVersion=$(Build.BuildNumber) -p:InformationalVersion="$(Build.BuildNumber)-$(Build.SourceVersion)"'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  inputs:
    command: test
    projects: 'src/Isle/Isle.sln'
    arguments: '-c $(BuildConfiguration) --no-build'
    nobuild: true

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack Isle.Compatibility'
  inputs:
    command: custom
    custom: pack
    projects: 'src/Isle/Isle.Compatibility/Isle.Compatibility.csproj'
    arguments: '-c $(BuildConfiguration) -p:VersionPrefix=$(Build.BuildNumber) --version-suffix "$(Suffix)" --no-build --include-symbols -o "$(Build.ArtifactStagingDirectory)"'

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack Isle.Core'
  inputs:
    command: custom
    custom: pack
    projects: 'src/Isle/Isle.Core/Isle.Core.csproj'
    arguments: '-c $(BuildConfiguration) -p:VersionPrefix=$(Build.BuildNumber) --version-suffix "$(Suffix)" --no-build --include-symbols -o "$(Build.ArtifactStagingDirectory)"'

- task: DotNetCoreCLI@2
  displayName: 'dotnet pack Isle.Extensions.Logging'
  inputs:
    command: custom
    custom: pack
    projects: 'src/Isle/Isle.Extensions.Logging/Isle.Extensions.Logging.csproj'
    arguments: '-c $(BuildConfiguration) -p:VersionPrefix=$(Build.BuildNumber) --version-suffix "$(Suffix)" --no-build --include-symbols -o "$(Build.ArtifactStagingDirectory)"'
    
- task: DotNetCoreCLI@2
  displayName: 'dotnet pack Isle.Serilog'
  inputs:
    command: custom
    custom: pack
    projects: 'src/Isle/Isle.Serilog/Isle.Serilog.csproj'
    arguments: '-c $(BuildConfiguration) -p:VersionPrefix=$(Build.BuildNumber) --version-suffix "$(Suffix)" --no-build --include-symbols -o "$(Build.ArtifactStagingDirectory)"'

- task: PublishBuildArtifacts@1

- task: NuGetToolInstaller@1
  displayName: 'Install NuGet 6.x'
  inputs:
    versionSpec: 6.x

- task: NuGetCommand@2
  displayName: 'MyGet push'
  condition: ${{ eq(parameters.IsRelease, false) }}
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: MyGet
    includeSymbols: true

- task: NuGetCommand@2
  displayName: 'NuGet push'
  condition: ${{ eq(parameters.IsRelease, true) }}
  inputs:
    command: push
    nuGetFeedType: external
    publishFeedCredentials: NuGet
    includeSymbols: true